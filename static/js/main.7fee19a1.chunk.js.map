{"version":3,"sources":["Forms.js","App.js","index.js"],"names":["Forms","props","state","data","ulabels","index","event","this","slice","value","target","setState","hardmode","level","hardtext","key","className","aria-labelledby","map","p","Fragment","htmlFor","id","text","sort","type","onChange","handleInputChange","bind","disabled","Component","App","labels","uuidv4","Math","random","a","b","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fee19a1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Forms.css';\r\n\r\nexport default class Forms extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {data: this.props.ulabels}\r\n    }\r\n\r\n\r\n    handleInputChange(index, event) {\r\n        var data = this.state.data.slice(); // Make a copy of the values first.\r\n        data[index].value = event.target.value; // Update it with the modified value.\r\n        this.setState({data}); // Update the state.\r\n    }\r\n\r\n    render() {\r\n        let hardmode = this.props.level\r\n        let hardtext = \"L\" + hardmode\r\n        let key = 0;\r\n        return (\r\n            <div className=\"SplitPane\" aria-labelledby={hardtext}>\r\n            <div className=\"SplitPane-50\"  aria-labelledby={hardtext+\"input\"}>\r\n                <h4>{hardtext}input</h4>\r\n                <form>\r\n                <div className=\"SplitPane-left\">\r\n                    {this.state.data.map((p,index) => (                        \r\n                        (hardmode === 0 && <React.Fragment key={key++}><label htmlFor={p.id+hardmode}>{p.text}<br/></label></React.Fragment>) ||\r\n                        (hardmode === 1 && <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>) ||\r\n                        (hardmode === 2 && (p.sort>=0.5\r\n                            ? <React.Fragment key={key++}><input type=\"text\" id={p.id+hardmode} onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment> \r\n                            : <React.Fragment key={key++}><label htmlFor={p.id+hardmode}>{p.text}<br/></label></React.Fragment>)) ||\r\n                        (hardmode === 3 && (p.sort>=0.5\r\n                            ? <React.Fragment key={key++}><input type=\"text\" onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment> \r\n                            : <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>))\r\n                    ))}\r\n                </div> \r\n                <div className=\"SplitPane-right\">\r\n                    {this.state.data.map((p,index) => (\r\n                        (hardmode === 0 && <React.Fragment key={key++}><input type=\"text\" id={p.id+hardmode} onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment>) ||\r\n                        (hardmode === 1 && <React.Fragment key={key++}><input type=\"text\" onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment>) ||\r\n                        (hardmode === 2 && (p.sort>=0.5\r\n                            ? <React.Fragment key={key++}><label htmlFor={p.id+hardmode}>{p.text}<br/></label></React.Fragment>\r\n                            : <React.Fragment key={key++}><input type=\"text\" id={p.id+hardmode} onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment>)) ||\r\n                        (hardmode === 3 && (p.sort>=0.5\r\n                            ? <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>\r\n                            : <React.Fragment key={key++}><input type=\"text\" onChange={this.handleInputChange.bind(this, index)} value={p.value}/><br/></React.Fragment>))\r\n                                               \r\n                    ))}\r\n                </div>\r\n                </form>\r\n            </div>\r\n            <div className=\"SplitPane-50\"   aria-labelledby={hardtext+\"output\"}>    \r\n                    <h4>{hardtext}output</h4>\r\n                <div className=\"SplitPane-left\">\r\n                    {this.state.data.map((p,index) => ( \r\n                            (hardmode === 0 && <React.Fragment key={key++}><label htmlFor={p.id+hardmode+\"o\"}>{p.text}<br/></label></React.Fragment>) ||\r\n                            (hardmode === 1 && <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>) ||\r\n                            (hardmode === 2 && (p.sort>=0.5\r\n                                ? <React.Fragment key={key++}><input type=\"text\" id={p.id+hardmode+\"o\"} value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment> \r\n                                : <React.Fragment key={key++}><label htmlFor={p.id+hardmode+\"o\"}>{p.text}<br/></label></React.Fragment>)) ||\r\n                            (hardmode === 3 && (p.sort>=0.5\r\n                                ? <React.Fragment key={key++}><input type=\"text\" value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment> \r\n                                : <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>))          \r\n                    ))}                    \r\n                </div> \r\n                <div className=\"SplitPane-right\">\r\n                    {this.state.data.map((p,index) => (\r\n                            (hardmode === 0 && <React.Fragment key={key++}><input type=\"text\" id={p.id+\"v\"} value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment>) ||\r\n                            (hardmode === 1 && <React.Fragment key={key++}><input type=\"text\" value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment>) ||\r\n                            (hardmode === 2 && (p.sort>=0.5\r\n                                ? <React.Fragment key={key++}><label htmlFor={p.id+hardmode+\"o\"}>{p.text}<br/></label></React.Fragment>\r\n                                : <React.Fragment key={key++}><input type=\"text\" id={p.id+hardmode+\"o\"} value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment>)) ||                            \r\n                            (hardmode === 3 && (p.sort>=0.5\r\n                                ? <React.Fragment key={key++}><>{p.text}<br/></></React.Fragment>\r\n                                : <React.Fragment key={key++}><input type=\"text\" value={p.text+p.value} disabled=\"disabled\"/><br/></React.Fragment>))  \r\n                    ))}                    \r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import Forms from './Forms';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction randomize(params) {\n  return params\n      .map((a) => ({sort: Math.random(), value: a}))\n      .sort((a, b) => a.sort - b.sort)\n      .map((a) => a.value)\n}\n\nfunction App() { \n  let ulabels = [\n    {id:uuidv4(), text:\"a\", value:\"\", sort:Math.random()},\n    {id:uuidv4(), text:\"b\", value:\"\", sort:Math.random()},\n    {id:uuidv4(), text:\"c\", value:\"\", sort:Math.random()},\n    {id:uuidv4(), text:\"d\", value:\"\", sort:Math.random()},\n    {id:uuidv4(), text:\"e\", value:\"\", sort:Math.random()}];\n  let labels = randomize(ulabels)\n\n  return (\n    <>\n      <Forms level={0} ulabels={labels} />\n      <br/>\n      <Forms level={1} ulabels={labels} />\n      <br/>\n      <Forms level={2} ulabels={labels} />      \n      <br/>\n      <Forms level={3} ulabels={labels} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}